#!/usr/bin/env python
import six
import sys, logging

try:
    import lxml.etree

except ImportError:
    six.print_('Unable to run application due to missing module lxml', file=sys.stderr)
    six.print_('Please install python-lxml, or pip install lxml to resume', file=sys.stderr)
    sys.exit(1)

def help(program, errcode):
    six.print_("usage: {:s} [-c | -i index] query\n".format(program), file=sys.stderr)
    six.print_('use xpath to select part of an html file and render to stdout', file=sys.stderr)
    six.print_('if -c is specified, return the number of results', file=sys.stderr)
    six.print_('if -i is specified, return the specified index', file=sys.stderr)
    sys.exit(errcode)

def select(data, path):
    parser = lxml.etree.XMLParser(recover=True, huge_tree=True, resolve_entities=True, compact=False)
    tr = lxml.etree.XML(data, parser=parser)
    if tr is None:
        parser = lxml.etree.HTMLParser(recover=True, compact=False)
        tr = lxml.etree.HTML(data, parser=parser)
    if tr is None:
        raise AssertionError('Unable to parse input')
    return tr.xpath(path)

def output(result, index):
    if index is None:
        return '\n\n'.join(lxml.etree.tostring(item, encoding='unicode') for item in result)
    return lxml.etree.tostring(result[index], encoding='unicode')

if __name__ == '__main__':
    args = list(sys.argv)
    args.pop(0)

    if len(args) == 0:
        help(sys.argv[0],0)

    index, count = None, False
    try:
        if args[0] == '-c':
            args.pop(0)
            count = True
        elif args[0] == '-i':
            args.pop(0)
            index = args.pop(0)

        path = args.pop(0)
        if len(args) > 0:
            raise IndexError

    except IndexError:
        six.print_('Error : Too many arguments specified : {!r}'.format(args), file=sys.stderr)
        help(sys.argv[0], 1)

    result = select(sys.stdin.read(), path)
    if count:
        six.print_(len(result))
        sys.exit(0)

    six.print_(output(result, int(index)) if index else output(result, None))
    sys.exit(0)
