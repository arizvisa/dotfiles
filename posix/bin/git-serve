#!/bin/sh
dashless=$(basename "$0" | sed -e 's/-/ /')

USAGE="[bind-address:bind-port] [..daemon parameters...]"
OPTIONS_SPEC=
SUBDIRECTORY_OK=Yes
DEFAULT_DAEMON_PARAMETERS="--verbose --informative-errors --reuseaddr --enable=upload-pack --enable=receive-pack --enable=upload-archive"

. git-sh-setup

# define some utilities
find_service_port()
{
    service="$1"
    protocol="$2"
    service_path=/etc/services
    grep -- "^$service" "$service_path" | sed "s/[ 	]\+/	/g" | cut -f2 | while read port; do
        case "$port" in
        */$protocol)
            echo "$port" | cut -d/ -f1
            return 0
            ;;
        *)
            ;;
        esac
    done
    return 1
}

split_host()
{
    target="$1"
    echo "$target" | rev | cut -d: -f2- | rev
}

split_port()
{
    target="$1"
    echo "$target" | rev | cut -d: -f1 | rev
}

isnumber()
{
	n=$(($1 + 0)) 2>/dev/null && test "$n" = "$1"
}

# make sure we have a working tree, and figure out where its at
require_work_tree
cd_to_toplevel

# figure out where we are and what repository it is
toplevel=`pwd`
name=`basename "$toplevel"`

# extract the parameters provided by the user
bind_host="0.0.0.0"
bind_port=`find_service_port git tcp`

if [ "$#" -gt 0 ]; then
    case "$1" in
    -)
        ;;
    :*)
        bind_port=`split_port "$1"`
        ;;
    *:)
        usage
        ;;
    *:*)
        bind_host=`split_host "$1"`
        bind_port=`split_port "$1"`
        ;;
    *)
        bind_host="$1"
    esac
    shift
fi

# check that we were given a hostname to bind to.
test -z "$bind_host" && usage

# check if the user gave us a valid port number, and then serve it if so.
if [ ! -z "$bind_port" ]; then
    isnumber "$bind_port" || usage

    # notify the user where we'll be serving the directory.
    printf "Serving repository %s from %s: git://%s:%d/%s\n" "$name" "$toplevel" "$bind_host" "$bind_port" "$name" 1>&2

    # now we can finally serve the directory from the toplevel.
    base_path=`resolvepath "$toplevel/.."`
    git daemon $DEFAULT_DAEMON_PARAMETERS "$@" --export-all --listen="$bind_host" --port="$bind_port" --base-path="$base_path" "$toplevel"

# otherwise, let the user know what the default will likely be...
else
    expected="9418/tcp"
    printf "Unable to determine the default port. (git will likely default to %s).\n" "$expected" 1>&2

    # and notify them about it.
    printf "Serving repository %s from %s: git://%s/%s\n" "$name" "$toplevel" "$bind_host" "$name" 1>&2

    # finally serve the directory from the toplevel without specifying the --port option.
    base_path=`resolvepath "$toplevel/.."`
    git daemon $DEFAULT_DAEMON_PARAMETERS "$@" --export-all --listen="$bind_host" --base-path="$base_path" "$toplevel"
fi
exit $?
