#!/usr/bin/env bash
dashless=$(basename "$0" | sed -e 's/-/ /')

USAGE=
OPTIONS_STUCKLONG=1
OPTIONS_KEEPDASHDASH=1
OPTIONS_SPEC="${dashless} [<options>] -- <url> [<refspec> [<dir>]]

Display all of the available references for the given url.
  <url>       the location of the remote to query or clone

If the following parameters are given, the reference will be shallow cloned.
  <refspec>   the reference to clone from
  <dir>       the directory to clone into
--
h,help              show the help
q,quiet             only print error messages
v,verbose           run verbosely
d,depth=level       use this depth when performing the clone
o,option=           transmit given string to server when communicating with git protocol
since=date          include history since the given date
exclude=revision    exclude commits reachable from the given revision
"

NONGIT_OK=1
DEFAULT_LIST_PARAMETERS="--tags --heads --refs --sort=version:refname"
DEFAULT_CLONE_PARAMETERS="--filter=blob:none --single-branch"

. git-sh-setup

parameters=()
list_parameters=( ${DEFAULT_LIST_PARAMETERS} )
clone_parameters=( ${DEFAULT_CLONE_PARAMETERS} )
while test $# -ne 0; do
    case "$1" in
    --quiet)
        parameters=( ${parameters[@]} "--quiet" )
        ;;
    --depth=*)
        IFS== read _ arg <<< "$1"
        clone_parameters=( ${clone_parameters[@]} "--depth=${arg}" )
        ;;
    --help)
        usage
        ;;
    --since=*)
        IFS== read _ arg <<< "$1"
        clone_parameters=( ${clone_parameters[@]} "--shallow-since=${arg}" )
        ;;
    --exclude=*)
        IFS== read _ arg <<< "$1"
        clone_parameters=( ${clone_parameters[@]} "--shallow-exclude=${arg}" )
        ;;
    --verbose)
        list_parameters=( ${list_parameters[@]} "--verbose" )
        clone_parameters=( ${clone_parameters[@]} "--verbose" )
        ;;
    --option=*)
        IFS== read _ arg <<< "$1"
        list_parameters=( ${list_parameters[@]} "--server-option=${arg}" )
        clone_parameters=( ${clone_parameters[@]} "--server-option=${arg}" )
        ;;
    --)
        shift
        break
        ;;
    -*)
        list_parameters=( ${list_parameters[@]} "$1" )
        clone_parameters=( ${clone_parameters[@]} "$1" )
        ;;
    *)
        usage
        ;;
    esac
    shift
done

set -- "$@"
if [ "$#" -eq 0 ]; then
    usage
elif [ "$#" -eq 1 ]; then
    url="$1"
    git ls-remote "${parameters[@]}" "${list_parameters[@]}" "${url}"
elif [ "$#" -le 3 ]; then
    url="$1"
    ref="$2"
    shift 2

    if [ "$#" -gt 0 ]; then
        directory="$1"
    else
        directory=`basename "${url}" .git`
    fi
    git clone "${parameters[@]}" "${clone_parameters[@]}" --branch="${ref}" -- "${url}" "${directory}" && {
        name=`basename "${ref}"`
        current=`git -C "${directory}" branch --show-current`
        [ -z "${current}" ] && git -C "${directory}" checkout "${parameters[@]}" -b "${name}"
    }

else
    die_with_status 1 "${dashless}: unexpected number of parameters ($#). expected 1 to 3"
fi
