#!/usr/bin/env bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
argv0=`basename "$0"`
ifs=$'\t'

## check if any defaults were specified
[ -z "$DEVICE" ] && DEVICE=/dev/urandom
[ -z "$COUNT" ] && COUNT=1
[ -z "$DEBUG" ] && DEBUG=0

## functions for getting random numbers in various formats
randomhex() {
    debugrng 'Generating %d random bytes.' "$1"
    dd "if=$DEVICE" 2>/dev/null | LC_CTYPE=c tr -dc "[:xdigit:]" | dd "count=$1" bs=1 2>/dev/null
}

randomint() {
    local number res

    debugrng 'Generating random integer of length %d.' "$1"
    number=`randomhex "$1"`
    res=`bc 2>/dev/null <<< "scale=8;$((16#$number)) / (16 ^ $1) * (10 ^ $1)" | cut -d. -f 1`
    [ -z "$res" ] && echo "0" || echo "$res"
}

randomrange() {
    local range length number res

    debugrng 'Generating random number from %d to %d.' "$1" "$2"
    range=`expr $2 - $1`
    length=`wc -c <<< "$range" | tr -d ' '`
    number=`randomint "$length"`
    res=`bc 2>/dev/null <<< "scale=8;$number / ( 10 ^ $length ) * $range + $1" | cut -d. -f 1`
    [ -z "$res" ] && echo "$1" || echo "$res"
}

randomstring() {
    dd "if=$DEVICE" 2>/dev/null | LC_CTYPE=c tr -dc "[:upper:][:lower:][:digit:]" | dd "count=$1" bs=1 2>/dev/null
}

randomname() {
    local length name

    length=`wc -c <<< "$1" | tr -d ' '`
    name=`randomstring "$length"`
    debugrng 'Generated random name: %s' "$name"
    echo "$name"
}

## general utilities
wipe() {
    local count=`du "$1" | cut -f 1`
    dd "if=$DEVICE" "of=$1" "count=$count" 'conv=fsync' 'status=progress'
}

tamper() {
    local seconds perlcode code oldest_yr current_yr

    seconds=`stat -c %W /`
    perlcode='($_,$_,$_,$_,$_,$yr,$_,$_,$_)=localtime(%d); print int($yr)+1900'
    code=`printf "$perlcode" "$seconds"`
    oldest_yr=`perl -e "$code"`
    current_yr=`date +%Y`
    debugrng 'Oldest year on filesystem was discovered as %d.' "$oldest_yr"
    debugrng 'Current year on filesystem is %d.' "$current_yr"

    for option in "" m a; do
        yr=`randomrange "$oldest_yr" "$current_yr"`
        mo=`randomrange "1" "12"`
        dy=`randomrange "1" "30"`
        hr=`randomrange "0" "24"`
        mn=`randomrange "0" "60"`
        ts=`printf "%04d%02d%02d%02d%02d" "$yr" "$mo" "$dy" "$hr" "$mn"`

        debug 'Adjusting the timestamp for file "%s" using option "%s": %s' "$1" "$option" "$ts"
        if [ -z "$option" ]; then
            touch -ft "$ts" "$1" || return 1
        else
            touch -ft "$ts" "-$option" "$1" || return 1
        fi
    done
}

## commands
wipefile() {
    local path="$1" count="$2"
    local file directory name

    # extract each of its pieces
    file=`basename "$path"`
    directory=`dirname "$path"`

    # wipe the file like we were asked to
    for c in `seq "$count"`; do
        debug 'Overwriting file %d time(s).' "$c"
        wipe "$path"
    done
    [ "$count" -eq 1 ] && _='s' || _=''
    info '%s: File overwritten %d time%s.' "$path" "$count" "$_"

    # tamper with the timestamps
    debug 'Tampering with the timestamps for file: %s' "$path"
    tamper "$path"
    if [ "$?" -gt "0" ]; then
        error '%s: Unable to tamper with file metadata.' "$path"
        return 1
    fi
    info '%s: Successfully tampered with creation, modification, and access times.' "$path"

    # rename the file to something random
    name=`randomname "$file"`
    debug 'Renaming file in path "%s": "%s" -> "%s"' "$directory" "$file" "$name"
    mv -vf "$directory/$file" "$directory/$name"
    if [ "$?" -gt "0" ]; then
        error '%s: Unable to rename file to random filename.' "$path"
        return 1
    fi
    info '%s: Renamed file to random name "%s".' "$path" "$name"

    # finally remove the requested file
    debug 'Removing file in path "%s": "%s"' "$directory" "$name"
    rm -vf "$directory/$name"
    if [ "$?" -gt "0" ]; then
        error '%s: Unable to remove file "%s".' "$path" "$name"
        mv -v "$directory/$name" "$path"
        [ "$?" -gt "0" ] && error '%s: Unable to restore random name to "%s".' "$path" "$path" && return 2
        return 1
    fi
    info '%s: Successfully removed file "%s".' "$path" "$name"

    printf "%s%c%s\n" "$directory/$file" "$ifs" "$directory/$name"
}

wipedirectory() {
    local path="$1"
    local file directory name

    # extract each of its pieces
    file=`basename "$path"`
    directory=`dirname "$path"`

    # tamper with the timestamps
    debug 'Tampering with the timestamps for directory: %s' "$path"
    tamper "$path"
    if [ "$?" -gt "0" ]; then
        error '%s: Unable to tamper with directory metadata.' "$path"
        return 1
    fi
    info '%s: Successfully tampered with creation, modification, and access times.' "$path"

    # rename the file to something random
    name=`randomname "$file"`
    debug 'Renaming directory in path "%s": "%s" -> "%s"' "$directory" "$file" "$name"
    mv -vf "$directory/$file" "$directory/$name"
    if [ "$?" -gt "0" ]; then
        error '%s: Unable to rename directory to random name.' "$path"
        return 1
    fi
    info '%s: Renamed directory to random name "%s".' "$path" "$name"

    # finally remove the requested file
    debug 'Removing directory in path "%s": "%s"' "$directory" "$name"
    rmdir "$directory/$name"
    if [ "$?" -gt "0" ]; then
        error '%s: Unable to remove directory "%s".' "$path" "$name"
        mv -v "$directory/$name" "$path"
        [ "$?" -gt "0" ] && error '%s: Unable to restore directory to "%s".' "$path" "$path" && return 2
        return 1
    fi
    info '%s: Successfully removed directory "%s".' "$path" "$name"

    printf "%s%c%s\n" "$directory/$file" "$ifs" "$directory/$name"
}

## message i/o
info() {
    local msg="$1"
    shift
    printf "%s: $msg\n" "$argv0" "$@" 1>&2
}

log() {
    local level="$1" msg="$2"
    shift 2
    printf "%s: (%s) $msg\n" "$argv0" "$level" "$@" 1>&2
}

debug() {
    [ "$DEBUG" -gt 0 ] && log "debug" "$@"
}

debugrng() {
    [ "$DEBUG" -gt 1 ] && log "prng" "$@"
}

warn() {
    log "warning" "$@"
}

error() {
    log "fatal" "$@"
}

## loop that wipes each argument
for path in "$@"; do
    if [ ! -e "$path" ]; then
        warn '%s: No such file or directory.' "$path"
        continue
    elif [ ! -f "$path" ] && [ ! -d "$path" ]; then
        warn '%s: Not a valid file or directory.' "$path"
        continue
    fi

    # read some input
    printf 'Are you SURE you wish to wipe: %s? [no] ' "$path" 1>&2
    read response
    [ -z "$response" ] && response="no"

    if [ "$response" != "yes" ]; then
        error '%s: File or directory not overwritten; user refused.' "$path"
        continue
    fi

    if [ -d "$path" ]; then
        wipedirectory "$path"
    elif [ -f "$path" ]; then
        wipefile "$path" "$COUNT"
    else
        error '%s: File or directory not overwritten; unknown type.' "$path"
    fi
done
