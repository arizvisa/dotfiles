#!/usr/bin/env bash

## conversions
msys2default()
{
    #sed 's/^\/\([a-zA-Z]\)\//\1:\//' <<< "$1"
    sed 's/^\/\([a-zA-Z]\)\//\/\l\1\//' <<< "$1"
}

cygwin2default()
{
    #sed 's/^\/cygdrive\/\([a-zA-Z]\)\//\1:\//' <<< "$1"
    sed 's/^\/cygdrive\/\([a-zA-Z]\)\//\/\l\1\//' <<< "$1"
}

windows2default()
{
    #C:\path\where
    path=$1
    #echo "$path" | sed 's/^\([a-zA-Z]\):\\/\1:\//;s/\\/\//g'
    sed 's/\\/\//g;s/^\([a-zA-Z]\):\//\/\l\1\//' <<< "$path"
}

default2msys()
{
    sed 's/^\([a-zA-Z]\):\//\/\l\1\//' <<< "$1"
}

default2cygwin()
{
    sed 's/^\([a-zA-Z]\):\//\/cygdrive\/\l\1\//' <<< "$1"
}

default2dos()
{
    echo "$1"
    delimited=`tr '/' $'\n' <<< "$1"`
    #filtered=`sed 's/^\([^\.]\{,8\}\)\(\.[[:alnum:]]\{,3\}\).*/\1\2/' <<< "$delimited"`
    #filtered=`sed 's/^\([^\.]\{,8\}\).*/\1/' <<< "$delimited"`
    filtered=( $delimited )

    printf '\%s' "${filtered[@]}"
    printf '%s' $'\n'
}

default2windows()
{
    sed 's/^\/\([a-zA-Z]\)\//\1:\//;s/\//\\/g' <<< "$1"
}

## misc
usage()
{
    echo "usage: $0 [-?] [-vip] [-u | -w | -s] [-W | -S | -P | path]"
    echo "Converts path from msys/cygwin to the specified format"
    cat <<EOF
    output format:
        -u -- output path is formatted for unix/msys (based on uname)
        -w -- output path is formatted for windows with forward slahes
        -s -- output path is formatted using the windows 8.3 format

    paths:
        -W -- return the path to the operating system (\\WINDOWS)
        -S -- return the path to the OS' System directory
        -P -- return the path to the application files (\\Program Files)
        path -- specify the path (c:/WINDOWS, /c/WINDOWS)
EOF

  ## original cygpath help
  cat 1>/dev/null <<EOF
  Usage: cygpath (-d|-m|-u|-w|-t TYPE) [-f FILE] [OPTION]... NAME...
         cygpath [-c HANDLE]
         cygpath [-ADHOPSW]
         cygpath [-F ID]

  Convert Unix and Windows format paths, or output system path information

  Output type options:

    -d, --dos             print DOS (short) form of NAMEs (C:\PROGRA~1\)
    -m, --mixed           like --windows, but with regular slashes (C:/WINNT)
    -M, --mode            report on mode of file (binmode or textmode)
    -u, --unix            (default) print Unix form of NAMEs (/cygdrive/c/winnt)
    -w, --windows         print Windows form of NAMEs (C:\WINNT)
    -t, --type TYPE       print TYPE form: 'dos', 'mixed', 'unix', or 'windows'

  Path conversion options:

    -a, --absolute        output absolute path
    -l, --long-name       print Windows long form of NAMEs (with -w, -m only)
    -p, --path            NAME is a PATH list (i.e., '/bin:/usr/bin')
    -s, --short-name      print DOS (short) form of NAMEs (with -w, -m only)
    -C, --codepage CP     print DOS, Windows, or mixed pathname in Windows
                          codepage CP.  CP can be a numeric codepage identifier,
                          or one of the reserved words ANSI, OEM, or UTF8.
                          If this option is missing, cygpath defaults to the
                          character set defined by the current locale.

  System information:

    -A, --allusers        use 'All Users' instead of current user for -D, -O, -P
    -D, --desktop         output 'Desktop' directory and exit
    -H, --homeroot        output 'Profiles' directory (home root) and exit
    -O, --mydocs          output 'My Documents' directory and exit
    -P, --smprograms      output Start Menu 'Programs' directory and exit
    -S, --sysdir          output system directory and exit
    -W, --windir          output 'Windows' directory and exit
    -F, --folder ID       output special folder with numeric ID and exit
  Try 'cygpath --help' for more information.
EOF
}

## parse arguments
while getopts uwsopmWSPvil? opt; do
    case $opt in
        u) FORMAT=unix ;;           # posixy form (msys|cygwin)
        m|w|l) FORMAT=windows ;;    # windows form
        s) FORMAT=dos ;;            # windows (8.3) form

        W) OUTPUT=windows ;;        # windows directory
        S) OUTPUT=system ;;         # windows system directory
        P) OUTPUT=program ;;        # program files
        p)
            # filename arg is a path (ignore this)
            ;;
        v|i)
            # ignore missing filename argument
            ;;
        ?)
            usage $0 1>&2
            exit 1
            ;;
    esac
done
shift $(( OPTIND-1 ))

# output according to
case "$OUTPUT" in
    windows) path="$SYSTEMROOT" ;;
    program) path="$PROGRAMFILES" ;;
    system) path=`dirname "$COMSPEC"` ;;
    *) path=$*
esac

# check if it seems windowsy
if [ `echo "$path" | tr -cd ':' | wc -c | tr -d ' '` -gt 0 ]; then
    default=`windows2default "$path"`
    #platform=windows

else # otherwise normalize to a regular path according to the current platform
    IFS=- read arch model platform <<< "${MACHTYPE}"
    case "${platform}" in
        msys)
            default=`msys2default "$path"`
            platform=msys
            ;;
        cygwin)
            default=`cygwin2default "$path"`
            platform=cygwin
            ;;
        *)
            default="$path" ;;
    esac
fi

# normalize the path by removing extraneous characters
case "${platform}" in
    *bsd*)
        # XXX: freebsd has no way to really normalize paths from shell...so try our best.
        normal=`sed 's/\/\+/\//g;s/\/\.\//\//g' <<< "$default"`
        ;;
    *)
        normal=`type -P realpath >/dev/null && realpath -s -m "$default" 2>/dev/null || readlink -m "$default" 2>/dev/null`
        ;;
esac

# change all backslashes to forward slashes for some configure scripts
normal=`sed 's/\\\/\//g' <<< "$normal"`

## output results
case "$FORMAT" in
    unix)
        case "${platform}" in
            # Msys style paths mix the windows drive-letter with ":" and posix
            msys)
                default2msys "$normal"
                ;;

            # Linux is sane, we don't have to do shit
            linux*) echo "$normal"
                ;;

            # I don't remember what cygwin's $platform was
            *)
                default2cygwin "$normal"
                ;;
        esac
        ;;

    # Use the dos-style (8.3) for the path
    dos)
        default2dos "$normal"
        ;;

    # Use the windows-style of path
    windows)
        default2windows "$normal"
        ;;

    # Otherwise just pass it through
    *)
        echo "$normal"
        ;;
esac

exit 0
