#!/usr/bin/env bash
url=$1

## options
CURL=`type -P curl.sh || type -P curl`
CURL_PARAMS=(-L -s -S)
CURL_OPTIONS=(-k --compressed '--retry 65535' '--retry-delay 0' '--retry-max-time 0' --anyauth)

OPENSSL=`type -P openssl.sh || type -P openssl`

# wtf, curl. why are these only available in libcurl?
[ -z "$CURLOPT_COOKIE" ] ||     CURL_PARAMS=("${CURL_PARAMS[@]}" "-b $CURLOPT_COOKIE")
[ -z "$CURLOPT_COOKIEFILE" ] || CURL_PARAMS=("${CURL_PARAMS[@]}" "-b $CURLOPT_COOKIEFILE")
[ -z "$CURLOPT_COOKIEJAR" ] ||  CURL_PARAMS=("${CURL_PARAMS[@]}" "-c $CURLOPT_COOKIEJAR")

## curl(1) related utilities
curl_support()
{
    "$CURL" "${CURL_PARAMS[@]}" $1 2>&1 | grep -q URL
}

curl_get()
{
    "$CURL" "${CURL_PARAMS[@]}" "${CURL_ARGS[@]}" "$@"
}

curl_resume()
{
    "$CURL" "${CURL_PARAMS[@]}" "${CURL_ARGS[@]}" -C- "$@"
}

CURL_ARGS=()
for opt in "${CURL_OPTIONS[@]}"; do
    if curl_support "$opt"; then
        CURL_ARGS=("${CURL_ARGS[@]}" $opt)
    fi
done

## openssl(1) related utilities
openssl_digest_types()
{
    "$OPENSSL" dgst -list | grep '^-' | paste -sd' ' - | tr -s ' ' | xargs printf "%s\0"
}

openssl_digest_file()
{
    path="$1" && shift
    "$OPENSSL" dgst "$@" -binary -- "$path" | od -A none -tx1 | paste -sd' ' - | tr -d ' '
}

openssl_digest_everything()
{
    path="$1" && shift
    if [ ! -e "$path" ]; then
        printf "Unable to locate the requested filename (%s)\n" "$path" 1>&2
        return 1
    fi

    openssl_digest_types | while read -d $'\0' option; do
        IFS=- read _ algorithm <<< "$option"
        (printf "%s\n" "$algorithm" && openssl_digest_file "$path" "$option") | xargs printf "%s:%s\n"
    done
}

openssl_digest_sorted()
{
    openssl_digest_everything "$@" | while IFS=$'\n' read line; do
        count=`wc -c <<< "$line"`
        printf "%s\t%s\n" "$count" "$line"
    done | sort -r -t $'\t' -n -k 1 | cut -d $'\t' -f2
}

## utilities for determining the expected and actual size
httpsize()
{
    url=$1
    curl_get --head -- "$url" | grep -ie "^Content-Length: *" | head -n 1 | tr " \n\t\r" ' ' | sed 's/^[Cc]ontent-[Ll]ength: *//;s/ *$//'
}

filesize()
{
    filename=$1
    case "$platform" in
    freebsd*)
        stat -f '%z' "$filename"
        ;;
    linux*)
        stat -c '%s' "$filename"
        ;;
    esac
}

## utilities for performing the actual transfer and updating the user
calculatepercent()
{
    numerator=$1
    denominator=$2
    scale=$3
    printf "scale=%d; %d / %d * 100.\n" "${scale:-3}" "$numerator" "$denominator" | bc
}

transferstatus()
{
    filename=$1
    expected=$2

    size=0
    while [ "$size" -lt "$expected" ]; do
        size=`filesize "$filename"`
        percentage=`calculatepercent "$size" "$expected"`
        printf "%s %0.3f%% %d/%d\n" "$filename" "$percentage" "$size" "$expected" 1>&2
        sleep 1
        echo -ne "\r\x1b[1A\x1b[K" 1>&2
    done
    printf "%s %0.3f%% %d/%d\n" "$filename" "$percentage" "$size" "$expected" 1>&2
}

filestatus()
{
    filename=$1

    size=0
    while true; do
        size=`filesize "$filename"`
        printf "%s %d\n" "$filename" "$size" 1>&2
        sleep 1
        echo -ne "\r\x1b[1A\x1b[K" 1>&2
    done
    printf "%s %d\n" "$filename" "$size" 1>&2
}

## entrypoints that will be used to perform the user's requested action
download()
{
    url=$1
    target=$2

    size=`httpsize "$url"`
    touch "$target"

    #"curl.exe" -# -C- -k --retry 999 --retry-delay 0 --retry-max-time 0 --compressed -o "$target" -O "$url" 1>&2 &
    curl_resume -o "$target" -- "$url" 1>&2 &
    pid=$!
    if [ -z "$size" ]; then
        filestatus "$target" &
        killthis=$!

    # if there was a size, then we can monitor
    else
        transferstatus "$target" "$size" &
        pid=$!
        killthis=
    fi

    wait $pid
    [ -z "$killthis" ] || kill "$killthis"
}

abort()
{
    url=$1
    target=$2
    trap - INT
    printf "Abort!\n" 1>&2

    printf "Aborted download of \"%s\" to \"%s\"\n" "$url" "$target" 1>&2
    openssl_digest_sorted "$target"
    exit 4
}

## actual logic for the script
filename=`basename "$url"`

# if the filename exists, then let the user know that we're resuming
if [ -e "$filename" ]; then
    resume=`filesize "$filename"`
    printf "Resuming transfer at offset %d of file from url \"%s\" in \"%s\"...\n" "$resume" "$url" "$filename" 1>&2

# otherwise, we just let the user know we're downloading the file
else
    printf "Downloading file from url \"%s\" to \"%s\"...\n" "$url" "$filename" 1>&2
fi

# allow the user to abort. after aborting, calculate all of the digests
# for the file that we downloaded, sort them, and display them tohe caller
trap "abort \"\$url\" \"\$filename\"" INT
download "$url" "$filename"
ec=$?
printf "Complete!\n" 1>&2

# we downloaded the file and only need to calculate all the available
# digests before we properly exit
openssl_digest_sorted "$filename"
exit "$ec"
