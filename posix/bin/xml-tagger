#!/usr/bin/env python
import six
import re, sys
import bs4

def help():
    six.print_('{:s} tag attribute [search replace]\n'.format(sys.argv[0]))
    six.print_('read in html from stdin, search for any instance of /tag/')
    six.print_('then print out the value of /attribute/')
    six.print_('if [search replace] is specfied, print out the html')
    six.print_('w/ a regex search/replace performed on the specified attribute')
    sys.exit()

def find(soup, tag, attribute):
    filtered = ( item for item in soup.find_all(tag) if isinstance(item, bs4.Tag) )
    res = []
    for item in filtered:
        try:
            res.extend(item[attribute]) if isinstance(item[attribute], list) else res.append(item[attribute])
        except KeyError:
            pass
        continue
    return '\n'.join(res)

def replace(soup, tag, attribute, pattern, replace):
    filtered = ( item for item in soup.find_all(tag) if isinstance(item, bs4.Tag) )
    for item in filtered:
        try:
            item[attribute] = [ re.sub(pattern, replace, single_attribute) for single_attribute in item[attribute] ]
        except KeyError:
            pass
        continue
    return soup.decode(formatter=attribute_formatter())

def accumulate_attributes(attributes, key, value):
    '''Aggregate duplicate attributes into the dictionary instead of overwriting the previous value.'''
    if isinstance(attributes[key], list):
        attributes.setdefault(key, []).append(value)
    else:
        attributes[key] = [attributes[key], value]
    return

class attribute_formatter(bs4.formatter.HTMLFormatter):
    '''Custom formatter that returns duplicate attributes as individual items.'''
    def attributes(self, tag):
        '''Iterate through a tag's attributes yielding the duplicate key for each item.'''
        for attribute, items in tag.attrs.items():
            if isinstance(items, list):
                for item in items:
                    yield attribute, item
                continue
            yield attribute, item
        return

if __name__ == '__main__':

    if len(sys.argv) == 3:
        cook = find
    elif len(sys.argv) == 5:
        cook = replace
    else:
        help()

    ingredients = sys.stdin.read()
    soup = bs4.BeautifulSoup(ingredients, 'html.parser', on_duplicate_attribute=accumulate_attributes)
    six.print_(cook(soup, *sys.argv[1:]))
