## key bindings based on
## $Id: screen-keys.conf,v 1.7 2010-07-31 11:39:13 nicm Exp $

# Set the activation prefix to ^A.
unbind-key C-b
set-option -g prefix ^A
bind-key a send-prefix

## global options
set-option -g remain-on-exit off
set-option -g mode-keys vi
set-option -g status-keys vi

set-option -g display-time 0
set-option -g visual-bell on
set-option -g bell-action any
set-option -g monitor-bell on

set-option -g status on
set-option -g status-interval 5
#set-option -g status-left
#set-option -g status-right

## window options
#set-window-option -g allow-rename off

### colors ripped from https://raw.github.com/seebi/tmux-colors-solarized/master/tmuxcolors.conf
set-option -g default-terminal "screen-256color"

## general colors
set-option -g  status-style "default"
set-option -ag status-style "bg=colour235"  #base02
set-option -ag status-style "fg=colour136"  #yellow

set-option -g  message-style "default"
set-option -ag message-style "bg=colour235" #base02
set-option -ag message-style "fg=colour166" #orange

set-option -g pane-border-style "fg=colour235"          #base02
set-option -g pane-active-border-style "fg=colour240"   #base01
set-option -g display-panes-active-colour "colour33"    #blue
set-option -g display-panes-colour "colour166"          #orange

## window colors
set-window-option -g  window-status-style "dim"
set-window-option -ag window-status-style "fg=colour244"
set-window-option -ag window-status-style "bg=default"

set-window-option -g  window-status-current-style "bright"
set-window-option -ag window-status-current-style "fg=colour166"    #orange
set-window-option -ag window-status-current-style "bg=default"

# clock
set-window-option -g clock-mode-style 24
set-window-option -g clock-mode-colour "colour64"   #green

### default commands

# joining of panes
unbind-key @
bind-key @ command-prompt -p "create horizontal pane from window id:"  "join-pane -v -s ':%%'"
unbind-key %
bind-key % command-prompt -p "create vertical pane from window id:"  "join-pane -h -s ':%%'"

# detaching of panes
unbind-key Q
bind-key Q if-shell "tmux display-message -p #{window_panes} | xargs printf '%d -gt 1' | xargs test" {
    run-shell "tmux display -p '#{pane_current_command}' | xargs tmux break-pane -d -n"
}

# session selection menu
# (mostly) ripped from: https://qmacro.org/autodidactics/2021/08/12/session-switching-with-the-tmux-menu/
bind ` run-shell "tmux list-sessions -F '##{session_name}' | awk '{print $1, NR, \"\\\"switch-client -t\", $1 \"\\\"\"}' | xargs tmux display-menu -T \"Sessions\""

## Bind appropriate commands similar to screen.

# lockscreen -- ^X x
#set-option -g lock-command ''
bind-key ^X lock-server
bind-key x lock-server

# create window -- ^C c
bind-key ^C new-window
bind-key c new-window

# detach -- ^D d
bind-key ^D detach
bind-key d detach

# balance out the layout
bind-key = select-layout "tiled"

# buffer list
bind-key '"' choose-buffer -F '(#{t:buffer_created}) #{p-7:buffer_size} byte#{?#{==:#{buffer_size},1},,s}'

# session list
bind-key 'U' choose-tree -sF '(#{t:session_created}) <#{pid}> : #{session_windows}#{?#{session_alerts},(#{session_alerts}),} window#{?#{==:#{session_windows},1},,s}#[align=centre]#(whoami)@#{host} -> #{pane_tty}#[align=right]#{window_name}(#{window_index}) : #{pane_current_path} -> #{pane_current_command} [#{pane_pid}]'

# list all panes -- *
bind-key '*' choose-tree -F '#{?window_format,#{?window_active,>, }#{window_name}: #{pane_tty}#{?#{>:#{window_panes},1},#{?pane_active,*,},} #[align=right] #{pane_current_path} -> #{pane_current_command} [#{pane_pid}],#{?session_format,#{session_windows} windows#{?session_grouped, (group #{session_group}: #{session_group_list}),} (#{session_attached} attached)#[align=centre]#(whoami)@#{host}#[align=right](#{t:session_created}),}}'

# display windows -- ^W w
bind-key ^W choose-tree -wF '#{?window_format,#{window_name}#{window_flags} (#{window_panes} pane#{?#{==:#{window_panes},1},,s}) : ###{pane_index} [#{pane_width}x#{pane_height}] #{?pane_at_top,top,#{?pane_at_right,right,#{?pane_at_bottom,bottom,#{?pane_at_left,left,}}}} #{?#{pane_mode},(#{pane_mode}),} #[align=right] #{pane_current_command}[#{pane_pid}] : #{t:window_activity},#{?session_format,#{session_windows} windows#{?session_grouped, (group #{session_group}: #{session_group_list}),} (#{session_attached} attached)#[align=centre]#(whoami)@#{host}#[align=right]#{t:session_created} : #{t:session_activity},}}'
bind-key w choose-tree -wF '#{?window_format,#{window_name}#{window_flags} (#{window_panes} pane#{?#{==:#{window_panes},1},,s}) : ###{pane_index} [#{pane_width}x#{pane_height}] #{?pane_at_top,top,#{?pane_at_right,right,#{?pane_at_bottom,bottom,#{?pane_at_left,left,}}}} #{?#{pane_mode},(#{pane_mode}),} #[align=right] #{pane_current_command}[#{pane_pid}] : #{t:window_activity},#{?session_format,#{session_windows} windows#{?session_grouped, (group #{session_group}: #{session_group_list}),} (#{session_attached} attached)#[align=centre]#(whoami)@#{host}#[align=right]#{t:session_created} : #{t:session_activity},}}'

# next window -- ^N n
bind-key ^N next-window
bind-key n next-window

# title -- A
bind-key A command-prompt "rename-window -- %%"

# last -- ^A
bind-key ^A last-window

# previous window -- ^P p
bind-key ^P previous-window
bind-key p previous-window

# quit -- \\
bind-key '\' confirm-before "kill-session"

# kill window -- K k
bind-key K confirm-before "kill-window"
bind-key k confirm-before "kill-window"

# redisplay -- ^L l
bind-key ^L refresh-client
bind-key l refresh-client

# split -- S
bind-key s split-window -v
bind-key S split-window -v

# vsplit -- | v
bind-key | split-window -h
bind-key v split-window -h

# change focus -- ^I <S-Tab>
bind-key Tab select-pane -t:.+
bind-key BTab select-pane -t:.-

# monitor activity -- M
set-option -g visual-activity on
set-option -g activity-action any
bind-key M set-window-option monitor-activity

# monitor silence -- _
set-option -g visual-silence on
set-option -g silence-action any
bind-key _ set-window-option monitor-silence 10
bind-key C-_ set-window-option monitor-silence 0
